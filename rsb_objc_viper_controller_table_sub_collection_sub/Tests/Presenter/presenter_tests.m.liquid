{% include 'header' %}

#import <XCTest/XCTest.h>
#import <OCMock/OCMock.h>

#import "{{ prefix }}{{ module_info.name }}Presenter.h"

#import "{{ prefix }}{{ module_info.name }}ViewInput.h"
#import "{{ prefix }}{{ module_info.name }}InteractorInput.h"
#import "{{ prefix }}{{ module_info.name }}SectionItemsFactory.h"
#import "{{ prefix }}{{ module_info.name }}ModuleOutput.h"

#import <RSBTableViewSectionItemProtocol.h>

#import "{{ prefix }}{{ module_info.name }}SubmoduleInput.h"
#import <RSBCollectionViewSectionItemProtocol.h>

@interface {{ prefix }}{{ module_info.name }}PresenterTests : XCTestCase

@property (nonatomic) {{ prefix }}{{ module_info.name }}Presenter *presenter;

@property (nonatomic) id mockInteractor;
@property (nonatomic) id mockView;

@end

@implementation {{ prefix }}{{ module_info.name }}PresenterTests

#pragma mark - Настройка окружения для тестирования

- (void)setUp {
    [super setUp];

    self.presenter = [[{{ prefix }}{{ module_info.name }}Presenter alloc] init];

    self.mockInteractor = OCMProtocolMock(@protocol({{ prefix }}{{ module_info.name }}InteractorInput));
    self.mockView = OCMProtocolMock(@protocol({{ prefix }}{{ module_info.name }}ViewInput));
    id factory = OCMClassMock([{{ prefix }}{{ module_info.name }}SectionItemsFactory class]);
    id submoduleInput = OCMProtocolMock(@protocol({{ prefix }}{{ module_info.name }}SubmoduleInput));

    self.presenter.interactor = self.mockInteractor;
    self.presenter.view = self.mockView;
    self.presenter.sectionItemsFactory = factory;
    self.presenter.submoduleInput = submoduleInput;
}

- (void)tearDown {
    self.presenter = nil;

    self.mockView = nil;
    self.mockInteractor = nil;

    [super tearDown];
}

#pragma mark - Тестирование методов {{ prefix }}{{ module_info.name }}ModuleInput

- (void)testThatModulePerformConfiguration {
    //given
    
    //when
    [self.presenter configureModule];
    
    //then
    OCMVerify([self.presenter.view setupInitialState]);
}

- (void)testThatModuleCorrectlyCreateSectionItemWithCellItemsFromObjects {
    //given
    NSArray *objects = @[[NSObject new]];
    
    id<RSBCollectionViewSectionItemProtocol> mockCollectionSectionItem = OCMProtocolMock(@protocol(RSBCollectionViewSectionItemProtocol));
    OCMStub([self.presenter.submoduleInput sectionItemWithCellItemsFromObjects:objects]).andReturn(mockCollectionSectionItem);

    id<RSBTableViewSectionItemProtocol> mockSectionItem = OCMProtocolMock(@protocol(RSBTableViewSectionItemProtocol));
    OCMStub([self.presenter.sectionItemsFactory sectionItemWithCollectionViewSectionItems:@[mockCollectionSectionItem]]).andReturn(mockSectionItem);
    
    //when
    id<RSBTableViewSectionItemProtocol> sectionItem = [self.presenter sectionItemWithCellItemsFromObjects:objects];
    
    //then
    OCMVerify([self.mockView setupEventsHandlingForSectionItems:@[sectionItem]]);
}

#pragma mark - Тестирование методов {{ prefix }}{{ module_info.name }}ViewOutput

- (void)testThatPresenterConnectedWithParentModule {
    //given
    id object = [NSObject new];
    
    //when
    [self.presenter submodule{{ module_info.name }}:nil didSelectCellWithObject:object];
    
    //then
    OCMVerify([self.presenter.moduleOutput module{{ module_info.name }}:self.presenter didSelectCollectionViewCellWithObject:object]);
}

#pragma mark - Тестирование методов {{ prefix }}{{ module_info.name }}InteractorOutput

@end
