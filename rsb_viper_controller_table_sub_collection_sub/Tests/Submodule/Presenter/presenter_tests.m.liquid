{% include 'header' %}

#import <XCTest/XCTest.h>
#import <OCMock/OCMock.h>

#import "{{ prefix }}{{ module_info.name }}SubmodulePresenter.h"

#import "{{ prefix }}{{ module_info.name }}SubmoduleViewInput.h"
#import "{{ prefix }}{{ module_info.name }}SubmoduleInteractorInput.h"
#import "{{ prefix }}{{ module_info.name }}SubmoduleSectionItemsFactory.h"

#import <RSBCollectionViewSectionItemProtocol.h>

@interface {{ prefix }}{{ module_info.name }}SubmodulePresenterTests : XCTestCase

@property (strong, nonatomic) {{ prefix }}{{ module_info.name }}SubmodulePresenter *presenter;

@property (strong, nonatomic) id mockInteractor;
@property (strong, nonatomic) id mockView;

@end

@implementation {{ prefix }}{{ module_info.name }}SubmodulePresenterTests

#pragma mark - Настройка окружения для тестирования

- (void)setUp {
    [super setUp];

    self.presenter = [[{{ prefix }}{{ module_info.name }}SubmodulePresenter alloc] init];

    self.mockInteractor = OCMProtocolMock(@protocol({{ prefix }}{{ module_info.name }}SubmoduleInteractorInput));
    self.mockView = OCMProtocolMock(@protocol({{ prefix }}{{ module_info.name }}SubmoduleViewInput));
    id factory = OCMClassMock([{{ prefix }}{{ module_info.name }}SubmoduleSectionItemsFactory class]);

    self.presenter.interactor = self.mockInteractor;
    self.presenter.view = self.mockView;
    self.presenter.sectionItemsFactory = factory;
}

- (void)tearDown {
    self.presenter = nil;

    self.mockView = nil;
    self.mockInteractor = nil;

    [super tearDown];
}

#pragma mark - Тестирование методов {{ prefix }}{{ module_info.name }}SubmoduleInput

- (void)testThatModuleCorrectlyCreateSectionItemWithCellItemsFromObjects {
    //given
    NSArray *objects = @[[NSObject new]];
    id<RSBCollectionViewSectionItemProtocol> mockSectionItem = OCMProtocolMock(@protocol(RSBCollectionViewSectionItemProtocol));
    OCMStub([self.presenter.sectionItemsFactory sectionItemWithCellItemsFromObjects:objects]).andReturn(mockSectionItem);
    
    //when
    id<RSBCollectionViewSectionItemProtocol> sectionItem = [self.presenter sectionItemWithCellItemsFromObjects:objects];
    
    //then
    OCMVerify([self.mockView setupEventsHandlingForSectionItems:@[sectionItem]]);
}

#pragma mark - Тестирование методов {{ prefix }}{{ module_info.name }}SubmoduleViewOutput

#pragma mark - Тестирование методов {{ prefix }}{{ module_info.name }}SubmoduleInteractorOutput

@end
