{% include 'header' %}

#import <XCTest/XCTest.h>
#import <OCMock.h>
#import <RSBTableViewManager.h>

#import "{{ prefix }}{{ module_info.name }}DataDisplayManager.h"
#import "{{ prefix }}{{ module_info.name }}SectionItemsFactoryInput.h"
#import "{{ prefix }}{{ module_info.name }}DataContainer.h"

@interface {{ prefix }}{{ module_info.name }}DataDisplayManagerTests : XCTestCase

@property (nonatomic) {{ prefix }}{{ module_info.name }}DataDisplayManager *manager;
@property (nonatomic) id mockTableView;

@end

@implementation {{ prefix }}{{ module_info.name }}DataDisplayManagerTests

- (void)setUp {
    [super setUp];
    self.manager = [[{{ prefix }}{{ module_info.name }}DataDisplayManager alloc] init];
    self.manager.tableViewManager = [[RSBTableViewManager alloc] init];
    self.mockTableView = OCMClassMock([UITableView class]);
}

- (void)tearDown {
    self.manager = nil;
    self.mockTableView = nil;
    [super tearDown];
}

#pragma mark - {{ prefix }}{{ module_info.name }}DataDisplayManagerInput methods

- (void)testThatTableViewManagerWillBeCreatedIfNeeded {
    // given
    
    
    // when
    [self.manager displayContainer:[OCMArg any]
                       inTableView:self.mockTableView
                    scrollDelegate:[OCMArg any]];
    
    // then
    XCTAssertNotNil(self.manager.tableViewManager);
    XCTAssertEqual(self.mockTableView, self.manager.tableViewManager.tableView);
}

- (void)testThatTableViewManagerWillBeRecreatedForNewTableView {
    // given
    id oldTableViewManager = self.manager.tableViewManager;
    
    // when
    [self.manager displayContainer:[OCMArg any]
                       inTableView:self.mockTableView
                    scrollDelegate:[OCMArg any]];
    
    // then
    XCTAssertNotEqual(self.manager.tableViewManager, oldTableViewManager);
    XCTAssertNotNil(self.manager.tableViewManager);
    XCTAssertEqual(self.mockTableView, self.manager.tableViewManager.tableView);
}

- (void)testThatManagerReturnsSectionItemsFromFactory {
    // given
    OCMStub([self.manager.tableViewManager tableView]).andReturn(self.mockTableView);
    
    id mockSectionFactory = OCMProtocolMock(@protocol({{ prefix }}{{ module_info.name }}SectionItemsFactoryInput));
    id mockSectionItems = OCMClassMock([NSArray class]);
    OCMStub([mockSectionFactory sectionItemsForContainer:[OCMArg any]]).andReturn(mockSectionItems);
    self.manager.sectionItemsFactory = mockSectionFactory;
    
    // when
    [self.manager displayContainer:[OCMArg any]
                       inTableView:self.mockTableView
                    scrollDelegate:[OCMArg any]];
    
    // then
    XCTAssertNotNil(self.manager.tableViewManager);
    XCTAssertEqual(self.mockTableView, self.manager.tableViewManager.tableView);
    XCTAssertEqual(self.manager.tableViewManager.sectionItems, mockSectionItems);
}

- (void)testThatScrollDelegateInstallsCorrect {
    // given
    id mockScrollDelegate = OCMProtocolMock(@protocol(UIScrollViewDelegate));
    
    // when
    [self.manager displayContainer:[OCMArg any]
                       inTableView:self.mockTableView
                    scrollDelegate:mockScrollDelegate];
    
    // then
    XCTAssertEqual(self.manager.tableViewManager.scrollDelegate, mockScrollDelegate);
}


@end
